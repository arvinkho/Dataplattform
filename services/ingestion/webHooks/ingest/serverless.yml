service: ingest

custom:
  project: dataplattform
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service} #this service definition includes stage

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: dataplattform-v2-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: 5

  apiKeys:
    - name: ${self:custom.stage}-mainIngestKey #when value is not set, AWS automatically generates API key

  #imports api gateway resources exported by ingestApiGateway service
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ingestApiGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ingestApiGateway-rootResourceId

  tags:
    project: ${self:custom.project}
    layer: ingestion
    ingestion: webHooks
  stackTags:
    project: ${self:custom.project}
    layer: ingestion
    ingestion: webHooks

package:
  individually: true
  exclude:
    - "./**"

functions:
  mainIngest:
    module: src/main_ingest
    handler: main_ingest.handler
    name: ${self:custom.service}-mainIngest
    description: main ingest lambda
    role: mainIngestRole

    package:
      include:
        - 'src/main_ingest/*.py' # Files to include in deployment

    events:
      - http:
          path: ingest/{type}
          method: post
          private: true #if true API key is needed

resources:
  Resources:
    mainIngestRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: mainIngestRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

plugins:
  - serverless-python-requirements
