# More documentation here: https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: downloadToPublicBucket

custom:
  #Edit these variables###########################
  editable:
    timeout: 900
    handlerFile: downloadToPublicBucket
    description: Downloads documents to the specific bucket
    bucketname: 
  ################################################
  stage: ${opt:stage, self:provider.stage} #define stage here to include opt:stage, if stage option is passed in with sls deploy
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3 # Default in lambda rt
      - botocore
      - pandas # Layer
      - pytz
      - numpy
      - numpy.libs
      - fastparquet
      - numba
      - llvmlite

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: dataplattform-v2-deploymentbucket # Name of s3 bucket
  runtime: python3.7
  memorySize: 1024 # MB
  timeout: ${self:custom.editable.timeout} # seconds
  
package:
  individually: true
  exclude:
    - "./**" # Exclude everything and include what you need in Public functions below

functions:
  downloadToPublicBucket:
    handler: ${self:custom.editable.handlerFile}.handler # fileName.functionNameInFile
    layers:
      - !ImportValue ${self:custom.stage}-fastparquetDepLayer-arn
      - !ImportValue ${self:custom.stage}-numpyDepLayer-arn
      - !ImportValue ${self:custom.stage}-pandasDepLayer-arn
    name: ${self:custom.stage}-${self:service} # Always begin name with stage
    description: ${self:custom.editable.description}
    role: !GetAtt S3Access.Arn
    package:
      include:
        - '*.py' # Files to include in deployment
    environment: # Environment variables, often stored in SSM
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
    tags: # Tag for this function. Every function are tagged with stage by default
  
resources: # The resources your functions use
  Resources:
    S3Access:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-PublicBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                  Resource:
                    - Fn::Join:
                      - ""
                      - - !ImportValue ${self:custom.stage}-publicBucketArn
                        - /public*
      
  Outputs:
    DownloadToPublicBucketLambdaFunctionArn:
      Export:
        Name: ${self:custom.stage}-${self:service}Arn

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-function-outputs