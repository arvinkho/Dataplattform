service: API

custom:
  project: dataplattform
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service} #this service definition includes stage
  wsgi:
    app: app.app
    packRequirements: false
    pythonBin: python
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: dataplattform-v2-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: 10

  tags:
    project: ${self:custom.project}
    layer: API
  stackTags:
    project: ${self:custom.project}
    layer: API

package:
  individually: true
  exclude:
    - "./**"

functions:
  API:
    handler: wsgi_handler.handler
    name: ${self:custom.stage}-${self:service}
    description: Flask API
    role: !GetAtt AssumeRole.Arn
    package:
      include:
        - '*.py'
        - '**/*.py'
    events:
      - http: ANY /
      - http: ANY {proxy+}
      - http:
          path: api/v1/login/{proxy+}
          method: any

resources: # The resources your functions use
  Resources:
    AssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: CanAssumeRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'sts:AssumeRole'
                  Resource: "*"

    Level2:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level2
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-ReadLevel2-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                      - "" 
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - /data/level-2/*
    Level3:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level3
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-ReadLevel3-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                      - "" 
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - /data/level-3/*


plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-pseudo-parameters
